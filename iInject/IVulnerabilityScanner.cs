using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace iInject {
	/// <summary>
	/// Provides a means of handling a page to scan for vulnerabilities.
	/// </summary>
	public interface IVulnerabilityScanner : IInjectionProvider {

		// TODO: Create a base class that does more for us.
		// Amongst other things, override a method to generate a value for a control.
		// If a value is returned, a post is sent.
		// All received responses to forms we sent get passed into a method that checks if the vulnerability is present.
		// If it is, create a VulnerabilityDetails instance automatically and add it.
		// Basically, remove all the grunt work.

		/// <summary>
		/// Scans for vulnerabilities on the given web form.
		/// </summary>
        string VulnerabilityName { get; }

		/// <summary>
		/// Asynchronously scans for any vulnerabilities on the given form, returning the results.
		/// If no vulnerabilities are found, Enumerable.Empty should be returned.
		/// </summary>
		Task<IEnumerable<VulnerabilityDetails>> ScanForVulnerabilitiesAsync(WebForm Form);
	}
}
